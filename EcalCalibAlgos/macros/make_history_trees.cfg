<draw>
trees eb_ratio
#ee_ratio
plugins '#include "PhiSym/EcalCalibDataFormats/interface/PhiSymRecHit.h"' GeometryTools.C
</draw>

### import iovs files list
#importCfg ../ntuples/Run2017B_SepRepro_v2/iovs_list.cfg \
#          ../ntuples/Run2017C_SepRepro_v2/iovs_list.cfg ../ntuples/Run2017D_SepRepro_v2/iovs_list.cfg 
importCfg ../ntuples/Run2017C_SepRepro_v3/iovs_list.cfg ../ntuples/Run2017D_SepRepro_v3/iovs_list.cfg 

NIOVs 31

### EB ###
for n 0 31
<eb_iov$n>
class PhiSymTTreeEB
file= iovs_files[$n] 
treeName eb_xstals
</eb_iov$n>
eb_iovs+= eb_iov$n
# even lumis
<eb_even_iov$n>
class PhiSymTTreeEB
file= iovs_files[$n] 
treeName eb_even
</eb_even_iov$n>
eb_iovs+= eb_even_iov$n
# odd lumis
<eb_odd_iov$n>
class PhiSymTTreeEB
file= iovs_files[$n] 
treeName eb_odd
</eb_odd_iov$n>
eb_iovs+= eb_odd_iov$n
end

### EE ###
for n 0 31
<ee_iov$n>
class PhiSymTTreeEE
file= iovs_files[$n] 
treeName ee_xstals
</ee_iov$n>
ee_iovs+= ee_iov$n
# even lumis
<ee_even_iov$n>
class PhiSymTTreeEE
file= iovs_files[$n] 
treeName ee_even
</ee_even_iov$n>
ee_iovs+= ee_even_iov$n
# odd lumis
<ee_odd_iov$n>
class PhiSymTTreeEE
file= iovs_files[$n] 
treeName ee_odd
</ee_odd_iov$n>
ee_iovs+= ee_odd_iov$n
end

<eb_ratio>
file history_EB_Run2017_SepRepro_v2.root
treeName eb
inputs= eb_iovs 
for size NIOVs
variables 'int n_events[$size]' \
          'int n_iovs' \
          'int iov[$size]' \
          'int avg_time[$size]' \
          'int hashId' \
          'int status' \
          'int ieta' \
          'int iphi' \
          'int pn' \
          'int sm' \
          'float ic_abs' \
          'float mean_bs_x[$size]' \
          'float mean_bs_sigmax[$size]' \          
          'float mean_bs_y[$size]' \
          'float mean_bs_sigmay[$size]' \          
          'float mean_bs_z[$size]' \
          'float mean_bs_sigmaz[$size]' \          
          'float ic_ratio_rel[$size]' \
          'float ic_ratio_abs[$size]' \
          'float ic_precision[$size]' \
          'float k_ratio_rel[$size]' \
          'float k_ratio_abs[$size]' \
          'float mean_et_ratio[$size]' \
          'double eflow_pn_abs[$size]' \
          'double eflow_abs[$size]' \         
          'double eflow_norm[$size]' \         
          'double eflow_err[$size]' \
          'double lc[$size]'
end
process 'vector<PhiSymTTreeEB*> eb_iovs, eb_even_iovs, eb_odd_iovs;'
for iov 0 31
process+= 'eb_iovs.push_back(eb_iov$iov);' \
          'eb_even_iovs.push_back(eb_even_iov$iov);' \
          'eb_odd_iovs.push_back(eb_odd_iov$iov);'
end
process+= 'vector<double> etSumEB(eb_iovs.size(), 0);' \
          'map<int, vector<double> > etSumPN;' \
          'for(int iV=0; iV<eb_iovs.size(); ++iV){' \
          'while(eb_iovs[iV]->NextEntry()){' \
          'if(etSumPN.find(WhichPN(eb_iovs[iV]->ieta, eb_iovs[iV]->iphi)) == etSumPN.end()){' \
          'etSumPN[WhichPN(eb_iovs[iV]->ieta, eb_iovs[iV]->iphi)] = vector<double>(eb_iovs.size(), 0);}' \
          'etSumPN[WhichPN(eb_iovs[iV]->ieta, eb_iovs[iV]->iphi)][iV] += eb_iovs[iV]->rec_hit->GetSumEt();' \
          'etSumEB[iV] += eb_iovs[iV]->rec_hit->GetSumEt();}}' \
          'for(int i=0; i<31200; ++i) {' \
          'for(int iV=0; iV<eb_iovs.size(); ++iV){' \
          'eb_iovs[iV]->NextEntry();' \
          'eb_even_iovs[iV]->NextEntry();' \
          'eb_odd_iovs[iV]->NextEntry();}' \
          'int ref=1;' \
          'for(int iV=ref; iV<eb_iovs.size(); ++iV){' \
          'if(iV==ref) eb_ratio->status = eb_iovs[iV]->rec_hit->GetSumEt() == 0 ? 0 : 1;' \
          'eb_ratio->n_events[iV-ref] = eb_iovs[iV]->n_events;' \
          'eb_ratio->iov[iV-ref] = iV;' \
          'eb_ratio->avg_time[iV-ref] = eb_iovs[iV]->avg_time;' \
          'eb_ratio->hashId = i;' \
          'eb_ratio->ieta = eb_iovs[ref]->ieta;' \
          'eb_ratio->iphi = eb_iovs[ref]->iphi;' \
          'eb_ratio->pn = WhichPN(eb_ratio->ieta, eb_ratio->iphi);' \
          'eb_ratio->sm = eb_ratio->ieta>0 ? (eb_ratio->iphi-1)/20+1 : -(eb_ratio->iphi-1)/20-1;' \
          'eb_ratio->mean_bs_x[iV-ref] = eb_iovs[iV]->mean_bs_x;' \
          'eb_ratio->mean_bs_sigmax[iV-ref] = eb_iovs[iV]->mean_bs_sigmax;' \
          'eb_ratio->mean_bs_y[iV-ref] = eb_iovs[iV]->mean_bs_y;' \
          'eb_ratio->mean_bs_sigmay[iV-ref] = eb_iovs[iV]->mean_bs_sigmay;' \
          'eb_ratio->mean_bs_z[iV-ref] = eb_iovs[iV]->mean_bs_z;' \
          'eb_ratio->mean_bs_sigmaz[iV-ref] = eb_iovs[iV]->mean_bs_sigmaz;' \
          'eb_ratio->ic_ratio_abs[iV-ref] = eb_iovs[iV]->ic_ch/eb_iovs[ref]->ic_ch;' \
          'eb_ratio->ic_ratio_rel[iV-ref] = eb_iovs[iV]->ic_ch/eb_iovs[iV-1]->ic_ch;' \
          'eb_ratio->ic_precision[iV-ref] = eb_even_iovs[iV]->ic_ch/eb_odd_iovs[iV]->ic_ch;' \
          'eb_ratio->k_ratio_abs[iV-ref] = eb_iovs[iV]->k_ch/eb_iovs[ref]->k_ch;' \
          'eb_ratio->k_ratio_rel[iV-ref] = eb_iovs[iV]->k_ch/eb_iovs[iV-1]->k_ch;' \
          'eb_ratio->mean_et_ratio[iV-ref] = (eb_iovs[iV]->rec_hit->GetSumEt()/eb_iovs[iV]->rec_hit->GetNhits())/(eb_iovs[ref]->rec_hit->GetSumEt()/eb_iovs[ref]->rec_hit->GetNhits());' \
          'eb_ratio->eflow_pn_abs[iV-ref] = 1+((eb_iovs[iV]->rec_hit->GetSumEt()/etSumPN[eb_ratio->pn][iV])/(eb_iovs[ref]->rec_hit->GetSumEt()/etSumPN[eb_ratio->pn][ref])-1)/eb_iovs[iV]->k_ch;' \
          'eb_ratio->eflow_abs[iV-ref] = 1+((eb_iovs[iV]->rec_hit->GetSumEt()/etSumEB[iV])/(eb_iovs[ref]->rec_hit->GetSumEt()/etSumEB[ref])-1)/eb_iovs[iV]->k_ch;' \
          'eb_ratio->eflow_norm[iV-ref] = 1+((eb_iovs[iV]->rec_hit->GetSumEt()/eb_iovs[iV]->eflow_norm)/(eb_iovs[ref]->rec_hit->GetSumEt()/eb_iovs[ref]->eflow_norm)-1)/eb_iovs[iV]->k_ch;' \
          'eb_ratio->lc[iV-ref] = eb_iovs[iV]->rec_hit->GetNhits()>0 ? eb_iovs[iV]->rec_hit->GetLCSum()/eb_iovs[iV]->rec_hit->GetNhits() : 0;}' \
          'eb_ratio->n_iovs = eb_iovs.size()-ref;' \
          'eb_ratio->GetTTreePtr()->Fill();}' \
          'eb_ratio->GetTTreePtr()->BuildIndex("hashId");' \
          'eb_ratio->GetTTreePtr()->AddFriend("EB", "$CMSSW_BASE/src/PhiSym/EcalCalibAlgos/data/sorted_crystals_info_EB.root");' 
#          'eb_ratio->GetTTreePtr()->AddFriend("ebfit", "/home/pigo/Work/CMS/ECAL/MoCa/ntuples/Run2016_legacy_v1/fit_delta_alphas_EB_Run2016.root");' 
#          'eb_ratio->GetTTreePtr()->AddFriend("eflow_alphas = alphas", "/home/pigo/Work/CMS/ECAL/MoCa/ntuples/Run2016_offline_laser/alpha_values_EB_TT_eflow2012.root");' \
#          'eb_ratio->GetTTreePtr()->AddFriend("pi0", "/home/pigo/Work/CMS/ECAL/MoCa/ntuples/alpha_comparison/sorted_pi0_alphas.root");'
#          'eb_ratio->eflow_err[iV-ref] = ((eb_iovs[iV]->rec_hit->GetSumEt()/etSumEB[iV])/(eb_iovs[ref]->rec_hit->GetSumEt()/etSumEB[ref]))/eb_iovs[iV]->k_ch*sqrt((eb_iovs[iV]->rec_hit->et2Sum_/eb_iovs[iV]->rec_hit->GetNhits()-pow(eb_iovs[iV]->rec_hit->GetSumEt()/eb_iovs[iV]->rec_hit->GetNhits(), 2))*eb_iovs[iV]->rec_hit->GetNhits()/pow(eb_iovs[iV]->rec_hit->GetSumEt(), 2) + (eb_iovs[ref]->rec_hit->et2Sum_/eb_iovs[ref]->rec_hit->GetNhits()-pow(eb_iovs[ref]->rec_hit->GetSumEt()/eb_iovs[ref]->rec_hit->GetNhits(), 2))*eb_iovs[ref]->rec_hit->GetNhits()/pow(eb_iovs[ref]->rec_hit->GetSumEt(), 2));' \
</eb_ratio>

<ee_ratio>
file history_EE_Run2017_SepRepro_v2.root
treeName ee
inputs= ee_iovs
for size NIOVs
variables 'int n_events[$size]' \
          'double avg_time[$size]' \
          'int n_iovs' \
          'int iov[$size]' \
          'int hashId' \
          'int ix' \
          'int iy' \
          'int iring' \
          'float ic_abs' \
          'float mean_bs_x[$size]' \
          'float mean_bs_sigmax[$size]' \          
          'float mean_bs_y[$size]' \
          'float mean_bs_sigmay[$size]' \          
          'float mean_bs_z[$size]' \
          'float mean_bs_sigmaz[$size]' \
          'float ic_ratio_rel[$size]' \
          'float ic_ratio_abs[$size]' \
          'float ic_precision[$size]' \       
          'float k_ratio_rel[$size]' \
          'float k_ratio_abs[$size]' \
          'double eflow_abs[$size]' \
          'double eflow_norm[$size]' \
          'double eflow_err[$size]' \
          'double lc[$size]'
end
process 'vector<PhiSymTTreeEE*> ee_iovs, ee_even_iovs, ee_odd_iovs;'
for iov 0 31
process+= 'ee_iovs.push_back(ee_iov$iov);' \
          'ee_even_iovs.push_back(ee_even_iov$iov);' \
          'ee_odd_iovs.push_back(ee_odd_iov$iov);'
end
process+= 'for(int i=0; i<ee_iovs[0]->GetTTreePtr()->GetEntriesFast(); ++i) {' \
          'for(int iV=0; iV<ee_iovs.size(); ++iV){' \
          'ee_iovs[iV]->NextEntry();' \
          'ee_even_iovs[iV]->NextEntry();' \
          'ee_odd_iovs[iV]->NextEntry();}' \
          'int ref=1;' \
          'for(int iV=ref; iV<ee_iovs.size(); ++iV){' \
          'ee_ratio->n_events[iV-ref] = ee_iovs[iV]->n_events;' \
          'ee_ratio->avg_time[iV-ref] = ee_iovs[iV]->avg_time;' \
          'ee_ratio->iov[iV-ref] = iV;' \
          'ee_ratio->hashId = i;' \       
          'ee_ratio->ix = ee_iovs[ref]->ix;' \
          'ee_ratio->iy = ee_iovs[ref]->iy;' \
          'ee_ratio->iring = ee_iovs[ref]->iring;' \
          'ee_ratio->mean_bs_x[iV-ref] = ee_iovs[iV]->mean_bs_x;' \
          'ee_ratio->mean_bs_sigmax[iV-ref] = ee_iovs[iV]->mean_bs_sigmax;' \
          'ee_ratio->mean_bs_y[iV-ref] = ee_iovs[iV]->mean_bs_y;' \
          'ee_ratio->mean_bs_sigmay[iV-ref] = ee_iovs[iV]->mean_bs_sigmay;' \
          'ee_ratio->mean_bs_z[iV-ref] = ee_iovs[iV]->mean_bs_z;' \
          'ee_ratio->mean_bs_sigmaz[iV-ref] = ee_iovs[iV]->mean_bs_sigmaz;' \
          'ee_ratio->ic_ratio_abs[iV-ref] = ee_iovs[iV]->ic_ch/ee_iovs[ref]->ic_ch;' \
          'ee_ratio->ic_ratio_rel[iV-ref] = ee_iovs[iV]->ic_ch/ee_iovs[iV-1]->ic_ch;' \
          'ee_ratio->ic_precision[iV-ref] = ee_even_iovs[iV]->ic_ch/ee_odd_iovs[iV]->ic_ch;' \  
          'ee_ratio->k_ratio_abs[iV-ref] = ee_iovs[iV]->k_ch/ee_iovs[ref]->k_ch;' \
          'ee_ratio->k_ratio_rel[iV-ref] = ee_iovs[iV]->k_ch/ee_iovs[iV-1]->k_ch;' \
          'ee_ratio->eflow_abs[iV-ref] = 1+((ee_iovs[iV]->rec_hit->GetSumEt()/etSumEB[iV])/(ee_iovs[ref]->rec_hit->GetSumEt()/etSumEB[ref])-1)/ee_iovs[iV]->k_ch;' \
          'ee_ratio->eflow_norm[iV-ref] = 1+((ee_iovs[iV]->rec_hit->GetSumEt()/ee_iovs[iV]->eflow_norm)/(ee_iovs[ref]->rec_hit->GetSumEt()/ee_iovs[ref]->eflow_norm)-1)/ee_iovs[iV]->k_ch;' \
          'ee_ratio->lc[iV-ref] = ee_iovs[iV]->rec_hit->GetNhits()>0 ? ee_iovs[iV]->rec_hit->GetLCSum()/ee_iovs[iV]->rec_hit->GetNhits() : 0;}' \
          'ee_ratio->n_iovs = ee_iovs.size()-ref;' \
          'ee_ratio->GetTTreePtr()->Fill();}' \
          'ee_ratio->GetTTreePtr()->AddFriend("EE", "$CMSSW_BASE/src/PhiSym/EcalCalibAlgos/data/sorted_crystals_info_EE.root");' 
</ee_ratio>
